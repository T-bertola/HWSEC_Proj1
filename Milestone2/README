The methodology used to detect trojans leverages the use of the OR, AND, XOR, and XNOR bitwise operations. First, random
data is generated to input into the circuit under test and sent to the golden circuit. Then the outputs are read back
from the device. The inputs and outputs, as well as the time the operation took, are written to a CSV file. The CSV file
is then used to compare with the outputs and operation time from the trojan for the same inputs. For each set of input,
output, and time, the trojan circuit output and the golden circuit output from the CSV are compared. If there isn't a
difference, the algorithm moves on to the next set. If the two are different, the expected and received are XORed
together and stored in a list and the inputs are also stored in a list. The time the operation took was compared as
well. Once a certain amount of random inputs are generated, the data parsing begins. The inputs that did not match the
expected outputs are first ANDed together to give the location of the trigger bits that need to be set to '1'. Then, the
inputs are ORed together to give the location of the trigger bits that need to be set to '0'. After all the trigger
inputs have been ANDed and ORed together, the final AND and OR results are XNORed. The result gives the location of all
the trigger bits where each bit set after the XNOR is determined to be a trigger bit. To find the payload bits on the
output, the list of differing outputs is traversed, looking for where the XOR operation set a bit to '1', signaling a
difference in the outputs. This reveals the payload bits. Some key features of this method is that the number of inputs,
number of random inputs, and the amount of data read is all configurable so this method should work on other circuit
designs.